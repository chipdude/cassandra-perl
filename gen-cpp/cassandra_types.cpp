/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "cassandra_types.h"

#include <TReflectionLocal.h>

namespace org { namespace apache { namespace cassandra {

// enum
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_DA45EC4BE6574774008DF9BE683A4778(
  ::apache::thrift::protocol::T_I32);

const char* Clock::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
const uint8_t Clock::binary_fingerprint[16] = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

// i64
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_DD1D26230D15C93E8FBDBA07B0299A44(
  ::apache::thrift::protocol::T_I64);

// void
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34(
  ::apache::thrift::protocol::T_STOP);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_56A59CE7FFAF82BCA8A19FAACDE4FB75[] = {
  { 1, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_56A59CE7FFAF82BCA8A19FAACDE4FB75[] = {
  &trlo_typespec_cassandra_DD1D26230D15C93E8FBDBA07B0299A44,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:i64;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_56A59CE7FFAF82BCA8A19FAACDE4FB75(
  ::apache::thrift::protocol::T_STRUCT,
  Clock::binary_fingerprint,
  trlo_metas_cassandra_56A59CE7FFAF82BCA8A19FAACDE4FB75,
  trlo_specs_cassandra_56A59CE7FFAF82BCA8A19FAACDE4FB75);

::apache::thrift::reflection::local::TypeSpec* Clock::local_reflection = 
  &trlo_typespec_cassandra_56A59CE7FFAF82BCA8A19FAACDE4FB75;

uint32_t Clock::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_timestamp = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp);
          isset_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_timestamp)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Clock::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Clock");
  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->timestamp);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Column::ascii_fingerprint = "311FAD2042360258ECFB01FECDADC5A0";
const uint8_t Column::binary_fingerprint[16] = {0x31,0x1F,0xAD,0x20,0x42,0x36,0x02,0x58,0xEC,0xFB,0x01,0xFE,0xCD,0xAD,0xC5,0xA0};

// string
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21(
  ::apache::thrift::protocol::T_STRING);

// i32
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_F89EDB52B075B8BD95989BD3D0A04C0A(
  ::apache::thrift::protocol::T_I32);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_311FAD2042360258ECFB01FECDADC5A0[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_311FAD2042360258ECFB01FECDADC5A0[] = {
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_56A59CE7FFAF82BCA8A19FAACDE4FB75,
  &trlo_typespec_cassandra_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:string;3:{1:i64;};4:opt-i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_311FAD2042360258ECFB01FECDADC5A0(
  ::apache::thrift::protocol::T_STRUCT,
  Column::binary_fingerprint,
  trlo_metas_cassandra_311FAD2042360258ECFB01FECDADC5A0,
  trlo_specs_cassandra_311FAD2042360258ECFB01FECDADC5A0);

::apache::thrift::reflection::local::TypeSpec* Column::local_reflection = 
  &trlo_typespec_cassandra_311FAD2042360258ECFB01FECDADC5A0;

uint32_t Column::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_value = false;
  bool isset_clock = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->clock.read(iprot);
          isset_clock = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ttl);
          this->__isset.ttl = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_clock)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Column::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Column");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->value);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("clock", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->clock.write(oprot);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.ttl) {
    xfer += oprot->writeFieldBegin("ttl", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->ttl);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* SuperColumn::ascii_fingerprint = "39CA009A0208AD0DF33E9D8A13CFF871";
const uint8_t SuperColumn::binary_fingerprint[16] = {0x39,0xCA,0x00,0x9A,0x02,0x08,0xAD,0x0D,0xF3,0x3E,0x9D,0x8A,0x13,0xCF,0xF8,0x71};

// list<{1:string;2:string;3:{1:i64;};4:opt-i32;}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_CE6AC4479C60ED867180D7EEBBDAECE5(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_cassandra_311FAD2042360258ECFB01FECDADC5A0,
  NULL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_39CA009A0208AD0DF33E9D8A13CFF871[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_39CA009A0208AD0DF33E9D8A13CFF871[] = {
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_CE6AC4479C60ED867180D7EEBBDAECE5,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:list<{1:string;2:string;3:{1:i64;};4:opt-i32;}>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_39CA009A0208AD0DF33E9D8A13CFF871(
  ::apache::thrift::protocol::T_STRUCT,
  SuperColumn::binary_fingerprint,
  trlo_metas_cassandra_39CA009A0208AD0DF33E9D8A13CFF871,
  trlo_specs_cassandra_39CA009A0208AD0DF33E9D8A13CFF871);

::apache::thrift::reflection::local::TypeSpec* SuperColumn::local_reflection = 
  &trlo_typespec_cassandra_39CA009A0208AD0DF33E9D8A13CFF871;

uint32_t SuperColumn::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_columns = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->columns.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->columns.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->columns[_i4].read(iprot);
            }
            iprot->readListEnd();
          }
          isset_columns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_columns)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SuperColumn::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SuperColumn");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("columns", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->columns.size());
    std::vector<Column> ::const_iterator _iter5;
    for (_iter5 = this->columns.begin(); _iter5 != this->columns.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ColumnOrSuperColumn::ascii_fingerprint = "E80F68F70D950C49C938C8F1123596CE";
const uint8_t ColumnOrSuperColumn::binary_fingerprint[16] = {0xE8,0x0F,0x68,0xF7,0x0D,0x95,0x0C,0x49,0xC9,0x38,0xC8,0xF1,0x12,0x35,0x96,0xCE};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_E80F68F70D950C49C938C8F1123596CE[] = {
  { 1, true },
  { 2, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_E80F68F70D950C49C938C8F1123596CE[] = {
  &trlo_typespec_cassandra_311FAD2042360258ECFB01FECDADC5A0,
  &trlo_typespec_cassandra_39CA009A0208AD0DF33E9D8A13CFF871,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:opt-{1:string;2:string;3:{1:i64;};4:opt-i32;};2:opt-{1:string;2:list<{1:string;2:string;3:{1:i64;};4:opt-i32;}>;};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_E80F68F70D950C49C938C8F1123596CE(
  ::apache::thrift::protocol::T_STRUCT,
  ColumnOrSuperColumn::binary_fingerprint,
  trlo_metas_cassandra_E80F68F70D950C49C938C8F1123596CE,
  trlo_specs_cassandra_E80F68F70D950C49C938C8F1123596CE);

::apache::thrift::reflection::local::TypeSpec* ColumnOrSuperColumn::local_reflection = 
  &trlo_typespec_cassandra_E80F68F70D950C49C938C8F1123596CE;

uint32_t ColumnOrSuperColumn::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->column.read(iprot);
          this->__isset.column = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->super_column.read(iprot);
          this->__isset.super_column = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ColumnOrSuperColumn::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ColumnOrSuperColumn");
  if (this->__isset.column) {
    xfer += oprot->writeFieldBegin("column", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->column.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.super_column) {
    xfer += oprot->writeFieldBegin("super_column", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->super_column.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* NotFoundException::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t NotFoundException::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_99914B932BD37A50B983C5E7C90AE93B[] = {
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_99914B932BD37A50B983C5E7C90AE93B[] = {
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_99914B932BD37A50B983C5E7C90AE93B(
  ::apache::thrift::protocol::T_STRUCT);

::apache::thrift::reflection::local::TypeSpec* NotFoundException::local_reflection = 
  &trlo_typespec_cassandra_99914B932BD37A50B983C5E7C90AE93B;

uint32_t NotFoundException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NotFoundException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("NotFoundException");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* InvalidRequestException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t InvalidRequestException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_EFB929595D312AC8F305D5A794CFEDA1[] = {
  { 1, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_EFB929595D312AC8F305D5A794CFEDA1[] = {
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_EFB929595D312AC8F305D5A794CFEDA1(
  ::apache::thrift::protocol::T_STRUCT);

::apache::thrift::reflection::local::TypeSpec* InvalidRequestException::local_reflection = 
  &trlo_typespec_cassandra_EFB929595D312AC8F305D5A794CFEDA1;

uint32_t InvalidRequestException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_why = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          isset_why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_why)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t InvalidRequestException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("InvalidRequestException");
  xfer += oprot->writeFieldBegin("why", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->why);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* UnavailableException::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t UnavailableException::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

::apache::thrift::reflection::local::TypeSpec* UnavailableException::local_reflection = 
  &trlo_typespec_cassandra_99914B932BD37A50B983C5E7C90AE93B;

uint32_t UnavailableException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UnavailableException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UnavailableException");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* TimedOutException::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t TimedOutException::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

::apache::thrift::reflection::local::TypeSpec* TimedOutException::local_reflection = 
  &trlo_typespec_cassandra_99914B932BD37A50B983C5E7C90AE93B;

uint32_t TimedOutException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TimedOutException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TimedOutException");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* AuthenticationException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t AuthenticationException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

::apache::thrift::reflection::local::TypeSpec* AuthenticationException::local_reflection = 
  &trlo_typespec_cassandra_EFB929595D312AC8F305D5A794CFEDA1;

uint32_t AuthenticationException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_why = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          isset_why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_why)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AuthenticationException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AuthenticationException");
  xfer += oprot->writeFieldBegin("why", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->why);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* AuthorizationException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t AuthorizationException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

::apache::thrift::reflection::local::TypeSpec* AuthorizationException::local_reflection = 
  &trlo_typespec_cassandra_EFB929595D312AC8F305D5A794CFEDA1;

uint32_t AuthorizationException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_why = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          isset_why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_why)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AuthorizationException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AuthorizationException");
  xfer += oprot->writeFieldBegin("why", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->why);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ColumnParent::ascii_fingerprint = "0A13AE61181713A4100DFFB3EC293822";
const uint8_t ColumnParent::binary_fingerprint[16] = {0x0A,0x13,0xAE,0x61,0x18,0x17,0x13,0xA4,0x10,0x0D,0xFF,0xB3,0xEC,0x29,0x38,0x22};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_0A13AE61181713A4100DFFB3EC293822[] = {
  { 3, false },
  { 4, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_0A13AE61181713A4100DFFB3EC293822[] = {
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {3:string;4:opt-string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_0A13AE61181713A4100DFFB3EC293822(
  ::apache::thrift::protocol::T_STRUCT,
  ColumnParent::binary_fingerprint,
  trlo_metas_cassandra_0A13AE61181713A4100DFFB3EC293822,
  trlo_specs_cassandra_0A13AE61181713A4100DFFB3EC293822);

::apache::thrift::reflection::local::TypeSpec* ColumnParent::local_reflection = 
  &trlo_typespec_cassandra_0A13AE61181713A4100DFFB3EC293822;

uint32_t ColumnParent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_column_family = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_family);
          isset_column_family = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->super_column);
          this->__isset.super_column = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_column_family)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ColumnParent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ColumnParent");
  xfer += oprot->writeFieldBegin("column_family", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->column_family);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.super_column) {
    xfer += oprot->writeFieldBegin("super_column", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeBinary(this->super_column);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ColumnPath::ascii_fingerprint = "606212895BCF63C757913CF35AEB3462";
const uint8_t ColumnPath::binary_fingerprint[16] = {0x60,0x62,0x12,0x89,0x5B,0xCF,0x63,0xC7,0x57,0x91,0x3C,0xF3,0x5A,0xEB,0x34,0x62};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_606212895BCF63C757913CF35AEB3462[] = {
  { 3, false },
  { 4, true },
  { 5, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_606212895BCF63C757913CF35AEB3462[] = {
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {3:string;4:opt-string;5:opt-string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_606212895BCF63C757913CF35AEB3462(
  ::apache::thrift::protocol::T_STRUCT,
  ColumnPath::binary_fingerprint,
  trlo_metas_cassandra_606212895BCF63C757913CF35AEB3462,
  trlo_specs_cassandra_606212895BCF63C757913CF35AEB3462);

::apache::thrift::reflection::local::TypeSpec* ColumnPath::local_reflection = 
  &trlo_typespec_cassandra_606212895BCF63C757913CF35AEB3462;

uint32_t ColumnPath::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_column_family = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_family);
          isset_column_family = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->super_column);
          this->__isset.super_column = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->column);
          this->__isset.column = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_column_family)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ColumnPath::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ColumnPath");
  xfer += oprot->writeFieldBegin("column_family", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->column_family);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.super_column) {
    xfer += oprot->writeFieldBegin("super_column", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeBinary(this->super_column);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.column) {
    xfer += oprot->writeFieldBegin("column", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeBinary(this->column);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* SliceRange::ascii_fingerprint = "184D24C9A0B8D4415E234DB649CAE740";
const uint8_t SliceRange::binary_fingerprint[16] = {0x18,0x4D,0x24,0xC9,0xA0,0xB8,0xD4,0x41,0x5E,0x23,0x4D,0xB6,0x49,0xCA,0xE7,0x40};

// bool
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_C506FF134BABDD6E68AB3E6350E95305(
  ::apache::thrift::protocol::T_BOOL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_184D24C9A0B8D4415E234DB649CAE740[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 4, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_184D24C9A0B8D4415E234DB649CAE740[] = {
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_cassandra_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:string;3:bool;4:i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_184D24C9A0B8D4415E234DB649CAE740(
  ::apache::thrift::protocol::T_STRUCT,
  SliceRange::binary_fingerprint,
  trlo_metas_cassandra_184D24C9A0B8D4415E234DB649CAE740,
  trlo_specs_cassandra_184D24C9A0B8D4415E234DB649CAE740);

::apache::thrift::reflection::local::TypeSpec* SliceRange::local_reflection = 
  &trlo_typespec_cassandra_184D24C9A0B8D4415E234DB649CAE740;

uint32_t SliceRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_start = false;
  bool isset_finish = false;
  bool isset_reversed = false;
  bool isset_count = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->start);
          isset_start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->finish);
          isset_finish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->reversed);
          isset_reversed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          isset_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_start)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_finish)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_reversed)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_count)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SliceRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SliceRange");
  xfer += oprot->writeFieldBegin("start", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->start);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("finish", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->finish);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("reversed", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->reversed);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* SlicePredicate::ascii_fingerprint = "F59D1D81C17DFFAF09988BF1C9CE5E27";
const uint8_t SlicePredicate::binary_fingerprint[16] = {0xF5,0x9D,0x1D,0x81,0xC1,0x7D,0xFF,0xAF,0x09,0x98,0x8B,0xF1,0xC9,0xCE,0x5E,0x27};

// list<string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_1F997684D04C8586EA5BDBB510E47233(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  NULL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_F59D1D81C17DFFAF09988BF1C9CE5E27[] = {
  { 1, true },
  { 2, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_F59D1D81C17DFFAF09988BF1C9CE5E27[] = {
  &trlo_typespec_cassandra_1F997684D04C8586EA5BDBB510E47233,
  &trlo_typespec_cassandra_184D24C9A0B8D4415E234DB649CAE740,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:opt-list<string>;2:opt-{1:string;2:string;3:bool;4:i32;};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_F59D1D81C17DFFAF09988BF1C9CE5E27(
  ::apache::thrift::protocol::T_STRUCT,
  SlicePredicate::binary_fingerprint,
  trlo_metas_cassandra_F59D1D81C17DFFAF09988BF1C9CE5E27,
  trlo_specs_cassandra_F59D1D81C17DFFAF09988BF1C9CE5E27);

::apache::thrift::reflection::local::TypeSpec* SlicePredicate::local_reflection = 
  &trlo_typespec_cassandra_F59D1D81C17DFFAF09988BF1C9CE5E27;

uint32_t SlicePredicate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_names.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            iprot->readListBegin(_etype9, _size6);
            this->column_names.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readBinary(this->column_names[_i10]);
            }
            iprot->readListEnd();
          }
          this->__isset.column_names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->slice_range.read(iprot);
          this->__isset.slice_range = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SlicePredicate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SlicePredicate");
  if (this->__isset.column_names) {
    xfer += oprot->writeFieldBegin("column_names", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->column_names.size());
      std::vector<std::string> ::const_iterator _iter11;
      for (_iter11 = this->column_names.begin(); _iter11 != this->column_names.end(); ++_iter11)
      {
        xfer += oprot->writeBinary((*_iter11));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.slice_range) {
    xfer += oprot->writeFieldBegin("slice_range", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->slice_range.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* IndexExpression::ascii_fingerprint = "D9F4CFE2F293A8B1052FD3031DD2C847";
const uint8_t IndexExpression::binary_fingerprint[16] = {0xD9,0xF4,0xCF,0xE2,0xF2,0x93,0xA8,0xB1,0x05,0x2F,0xD3,0x03,0x1D,0xD2,0xC8,0x47};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_D9F4CFE2F293A8B1052FD3031DD2C847[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_D9F4CFE2F293A8B1052FD3031DD2C847[] = {
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_DA45EC4BE6574774008DF9BE683A4778,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:enum;3:string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_D9F4CFE2F293A8B1052FD3031DD2C847(
  ::apache::thrift::protocol::T_STRUCT,
  IndexExpression::binary_fingerprint,
  trlo_metas_cassandra_D9F4CFE2F293A8B1052FD3031DD2C847,
  trlo_specs_cassandra_D9F4CFE2F293A8B1052FD3031DD2C847);

::apache::thrift::reflection::local::TypeSpec* IndexExpression::local_reflection = 
  &trlo_typespec_cassandra_D9F4CFE2F293A8B1052FD3031DD2C847;

uint32_t IndexExpression::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_column_name = false;
  bool isset_op = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->column_name);
          isset_column_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->op = (IndexOperator)ecast12;
          isset_op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_column_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_op)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t IndexExpression::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IndexExpression");
  xfer += oprot->writeFieldBegin("column_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->column_name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->op);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->value);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* IndexClause::ascii_fingerprint = "9B551B9AB86120B0EEA9005C77FD3C1F";
const uint8_t IndexClause::binary_fingerprint[16] = {0x9B,0x55,0x1B,0x9A,0xB8,0x61,0x20,0xB0,0xEE,0xA9,0x00,0x5C,0x77,0xFD,0x3C,0x1F};

// list<{1:string;2:enum;3:string;}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_40D8712654F1B81DE087B80B5A3D81A2(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_cassandra_D9F4CFE2F293A8B1052FD3031DD2C847,
  NULL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_9B551B9AB86120B0EEA9005C77FD3C1F[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_9B551B9AB86120B0EEA9005C77FD3C1F[] = {
  &trlo_typespec_cassandra_40D8712654F1B81DE087B80B5A3D81A2,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:list<{1:string;2:enum;3:string;}>;2:string;3:i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_9B551B9AB86120B0EEA9005C77FD3C1F(
  ::apache::thrift::protocol::T_STRUCT,
  IndexClause::binary_fingerprint,
  trlo_metas_cassandra_9B551B9AB86120B0EEA9005C77FD3C1F,
  trlo_specs_cassandra_9B551B9AB86120B0EEA9005C77FD3C1F);

::apache::thrift::reflection::local::TypeSpec* IndexClause::local_reflection = 
  &trlo_typespec_cassandra_9B551B9AB86120B0EEA9005C77FD3C1F;

uint32_t IndexClause::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_expressions = false;
  bool isset_start_key = false;
  bool isset_count = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->expressions.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            iprot->readListBegin(_etype16, _size13);
            this->expressions.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += this->expressions[_i17].read(iprot);
            }
            iprot->readListEnd();
          }
          isset_expressions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->start_key);
          isset_start_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          isset_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_expressions)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_start_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_count)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t IndexClause::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IndexClause");
  xfer += oprot->writeFieldBegin("expressions", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->expressions.size());
    std::vector<IndexExpression> ::const_iterator _iter18;
    for (_iter18 = this->expressions.begin(); _iter18 != this->expressions.end(); ++_iter18)
    {
      xfer += (*_iter18).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("start_key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->start_key);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* KeyRange::ascii_fingerprint = "8F248C09AF1EC3656ABD8565EA1F59C1";
const uint8_t KeyRange::binary_fingerprint[16] = {0x8F,0x24,0x8C,0x09,0xAF,0x1E,0xC3,0x65,0x6A,0xBD,0x85,0x65,0xEA,0x1F,0x59,0xC1};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_8F248C09AF1EC3656ABD8565EA1F59C1[] = {
  { 1, true },
  { 2, true },
  { 3, true },
  { 4, true },
  { 5, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_8F248C09AF1EC3656ABD8565EA1F59C1[] = {
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:opt-string;2:opt-string;3:opt-string;4:opt-string;5:i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_8F248C09AF1EC3656ABD8565EA1F59C1(
  ::apache::thrift::protocol::T_STRUCT,
  KeyRange::binary_fingerprint,
  trlo_metas_cassandra_8F248C09AF1EC3656ABD8565EA1F59C1,
  trlo_specs_cassandra_8F248C09AF1EC3656ABD8565EA1F59C1);

::apache::thrift::reflection::local::TypeSpec* KeyRange::local_reflection = 
  &trlo_typespec_cassandra_8F248C09AF1EC3656ABD8565EA1F59C1;

uint32_t KeyRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_count = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->start_key);
          this->__isset.start_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->end_key);
          this->__isset.end_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->start_token);
          this->__isset.start_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->end_token);
          this->__isset.end_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          isset_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_count)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t KeyRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("KeyRange");
  if (this->__isset.start_key) {
    xfer += oprot->writeFieldBegin("start_key", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeBinary(this->start_key);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.end_key) {
    xfer += oprot->writeFieldBegin("end_key", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->end_key);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.start_token) {
    xfer += oprot->writeFieldBegin("start_token", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->start_token);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.end_token) {
    xfer += oprot->writeFieldBegin("end_token", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->end_token);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* KeySlice::ascii_fingerprint = "2AA4A482655A8D3B33734CC19F3F3515";
const uint8_t KeySlice::binary_fingerprint[16] = {0x2A,0xA4,0xA4,0x82,0x65,0x5A,0x8D,0x3B,0x33,0x73,0x4C,0xC1,0x9F,0x3F,0x35,0x15};

// list<{1:opt-{1:string;2:string;3:{1:i64;};4:opt-i32;};2:opt-{1:string;2:list<{1:string;2:string;3:{1:i64;};4:opt-i32;}>;};}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_6DC4BDE6AFB3C0317C2CCDBEE11CDE75(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_cassandra_E80F68F70D950C49C938C8F1123596CE,
  NULL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_2AA4A482655A8D3B33734CC19F3F3515[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_2AA4A482655A8D3B33734CC19F3F3515[] = {
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_6DC4BDE6AFB3C0317C2CCDBEE11CDE75,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:list<{1:opt-{1:string;2:string;3:{1:i64;};4:opt-i32;};2:opt-{1:string;2:list<{1:string;2:string;3:{1:i64;};4:opt-i32;}>;};}>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_2AA4A482655A8D3B33734CC19F3F3515(
  ::apache::thrift::protocol::T_STRUCT,
  KeySlice::binary_fingerprint,
  trlo_metas_cassandra_2AA4A482655A8D3B33734CC19F3F3515,
  trlo_specs_cassandra_2AA4A482655A8D3B33734CC19F3F3515);

::apache::thrift::reflection::local::TypeSpec* KeySlice::local_reflection = 
  &trlo_typespec_cassandra_2AA4A482655A8D3B33734CC19F3F3515;

uint32_t KeySlice::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_key = false;
  bool isset_columns = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          isset_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->columns.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            iprot->readListBegin(_etype22, _size19);
            this->columns.resize(_size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              xfer += this->columns[_i23].read(iprot);
            }
            iprot->readListEnd();
          }
          isset_columns = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_columns)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t KeySlice::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("KeySlice");
  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->key);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("columns", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->columns.size());
    std::vector<ColumnOrSuperColumn> ::const_iterator _iter24;
    for (_iter24 = this->columns.begin(); _iter24 != this->columns.end(); ++_iter24)
    {
      xfer += (*_iter24).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* KeyCount::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t KeyCount::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_EEBC915CE44901401D881E6091423036[] = {
  { 1, false },
  { 2, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_EEBC915CE44901401D881E6091423036[] = {
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_EEBC915CE44901401D881E6091423036(
  ::apache::thrift::protocol::T_STRUCT,
  KeyCount::binary_fingerprint,
  trlo_metas_cassandra_EEBC915CE44901401D881E6091423036,
  trlo_specs_cassandra_EEBC915CE44901401D881E6091423036);

::apache::thrift::reflection::local::TypeSpec* KeyCount::local_reflection = 
  &trlo_typespec_cassandra_EEBC915CE44901401D881E6091423036;

uint32_t KeyCount::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_key = false;
  bool isset_count = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          isset_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->count);
          isset_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_count)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t KeyCount::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("KeyCount");
  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->key);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->count);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Deletion::ascii_fingerprint = "0CAEBC752C2855B1AB79CBB689947DF2";
const uint8_t Deletion::binary_fingerprint[16] = {0x0C,0xAE,0xBC,0x75,0x2C,0x28,0x55,0xB1,0xAB,0x79,0xCB,0xB6,0x89,0x94,0x7D,0xF2};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_0CAEBC752C2855B1AB79CBB689947DF2[] = {
  { 1, false },
  { 2, true },
  { 3, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_0CAEBC752C2855B1AB79CBB689947DF2[] = {
  &trlo_typespec_cassandra_56A59CE7FFAF82BCA8A19FAACDE4FB75,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_F59D1D81C17DFFAF09988BF1C9CE5E27,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:{1:i64;};2:opt-string;3:opt-{1:opt-list<string>;2:opt-{1:string;2:string;3:bool;4:i32;};};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_0CAEBC752C2855B1AB79CBB689947DF2(
  ::apache::thrift::protocol::T_STRUCT,
  Deletion::binary_fingerprint,
  trlo_metas_cassandra_0CAEBC752C2855B1AB79CBB689947DF2,
  trlo_specs_cassandra_0CAEBC752C2855B1AB79CBB689947DF2);

::apache::thrift::reflection::local::TypeSpec* Deletion::local_reflection = 
  &trlo_typespec_cassandra_0CAEBC752C2855B1AB79CBB689947DF2;

uint32_t Deletion::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_clock = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->clock.read(iprot);
          isset_clock = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->super_column);
          this->__isset.super_column = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->predicate.read(iprot);
          this->__isset.predicate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_clock)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Deletion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Deletion");
  xfer += oprot->writeFieldBegin("clock", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->clock.write(oprot);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.super_column) {
    xfer += oprot->writeFieldBegin("super_column", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeBinary(this->super_column);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.predicate) {
    xfer += oprot->writeFieldBegin("predicate", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->predicate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Mutation::ascii_fingerprint = "54FF89DDBC55020F151B9654B1D21FC0";
const uint8_t Mutation::binary_fingerprint[16] = {0x54,0xFF,0x89,0xDD,0xBC,0x55,0x02,0x0F,0x15,0x1B,0x96,0x54,0xB1,0xD2,0x1F,0xC0};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_54FF89DDBC55020F151B9654B1D21FC0[] = {
  { 1, true },
  { 2, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_54FF89DDBC55020F151B9654B1D21FC0[] = {
  &trlo_typespec_cassandra_E80F68F70D950C49C938C8F1123596CE,
  &trlo_typespec_cassandra_0CAEBC752C2855B1AB79CBB689947DF2,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:opt-{1:opt-{1:string;2:string;3:{1:i64;};4:opt-i32;};2:opt-{1:string;2:list<{1:string;2:string;3:{1:i64;};4:opt-i32;}>;};};2:opt-{1:{1:i64;};2:opt-string;3:opt-{1:opt-list<string>;2:opt-{1:string;2:string;3:bool;4:i32;};};};}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_54FF89DDBC55020F151B9654B1D21FC0(
  ::apache::thrift::protocol::T_STRUCT,
  Mutation::binary_fingerprint,
  trlo_metas_cassandra_54FF89DDBC55020F151B9654B1D21FC0,
  trlo_specs_cassandra_54FF89DDBC55020F151B9654B1D21FC0);

::apache::thrift::reflection::local::TypeSpec* Mutation::local_reflection = 
  &trlo_typespec_cassandra_54FF89DDBC55020F151B9654B1D21FC0;

uint32_t Mutation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->column_or_supercolumn.read(iprot);
          this->__isset.column_or_supercolumn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->deletion.read(iprot);
          this->__isset.deletion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Mutation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Mutation");
  if (this->__isset.column_or_supercolumn) {
    xfer += oprot->writeFieldBegin("column_or_supercolumn", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->column_or_supercolumn.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deletion) {
    xfer += oprot->writeFieldBegin("deletion", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->deletion.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* TokenRange::ascii_fingerprint = "8E2AD6401E83558ECFD6A13D74DD0A3F";
const uint8_t TokenRange::binary_fingerprint[16] = {0x8E,0x2A,0xD6,0x40,0x1E,0x83,0x55,0x8E,0xCF,0xD6,0xA1,0x3D,0x74,0xDD,0x0A,0x3F};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_8E2AD6401E83558ECFD6A13D74DD0A3F[] = {
  { 1, false },
  { 2, false },
  { 3, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_8E2AD6401E83558ECFD6A13D74DD0A3F[] = {
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_1F997684D04C8586EA5BDBB510E47233,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:string;3:list<string>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_8E2AD6401E83558ECFD6A13D74DD0A3F(
  ::apache::thrift::protocol::T_STRUCT,
  TokenRange::binary_fingerprint,
  trlo_metas_cassandra_8E2AD6401E83558ECFD6A13D74DD0A3F,
  trlo_specs_cassandra_8E2AD6401E83558ECFD6A13D74DD0A3F);

::apache::thrift::reflection::local::TypeSpec* TokenRange::local_reflection = 
  &trlo_typespec_cassandra_8E2AD6401E83558ECFD6A13D74DD0A3F;

uint32_t TokenRange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_start_token = false;
  bool isset_end_token = false;
  bool isset_endpoints = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->start_token);
          isset_start_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->end_token);
          isset_end_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->endpoints.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            iprot->readListBegin(_etype28, _size25);
            this->endpoints.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              xfer += iprot->readString(this->endpoints[_i29]);
            }
            iprot->readListEnd();
          }
          isset_endpoints = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_start_token)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_end_token)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_endpoints)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TokenRange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TokenRange");
  xfer += oprot->writeFieldBegin("start_token", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->start_token);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("end_token", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->end_token);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("endpoints", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, this->endpoints.size());
    std::vector<std::string> ::const_iterator _iter30;
    for (_iter30 = this->endpoints.begin(); _iter30 != this->endpoints.end(); ++_iter30)
    {
      xfer += oprot->writeString((*_iter30));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* AuthenticationRequest::ascii_fingerprint = "5EA2D527ECA3BA20C77AFC023EE8C05F";
const uint8_t AuthenticationRequest::binary_fingerprint[16] = {0x5E,0xA2,0xD5,0x27,0xEC,0xA3,0xBA,0x20,0xC7,0x7A,0xFC,0x02,0x3E,0xE8,0xC0,0x5F};

// map<string,string>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_E525259F38EF383401EB0A958458F19C(
  ::apache::thrift::protocol::T_MAP,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_5EA2D527ECA3BA20C77AFC023EE8C05F[] = {
  { 1, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_5EA2D527ECA3BA20C77AFC023EE8C05F[] = {
  &trlo_typespec_cassandra_E525259F38EF383401EB0A958458F19C,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:map<string,string>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_5EA2D527ECA3BA20C77AFC023EE8C05F(
  ::apache::thrift::protocol::T_STRUCT,
  AuthenticationRequest::binary_fingerprint,
  trlo_metas_cassandra_5EA2D527ECA3BA20C77AFC023EE8C05F,
  trlo_specs_cassandra_5EA2D527ECA3BA20C77AFC023EE8C05F);

::apache::thrift::reflection::local::TypeSpec* AuthenticationRequest::local_reflection = 
  &trlo_typespec_cassandra_5EA2D527ECA3BA20C77AFC023EE8C05F;

uint32_t AuthenticationRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_credentials = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->credentials.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _ktype32;
            ::apache::thrift::protocol::TType _vtype33;
            iprot->readMapBegin(_ktype32, _vtype33, _size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              std::string _key36;
              xfer += iprot->readString(_key36);
              std::string& _val37 = this->credentials[_key36];
              xfer += iprot->readString(_val37);
            }
            iprot->readMapEnd();
          }
          isset_credentials = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_credentials)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t AuthenticationRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AuthenticationRequest");
  xfer += oprot->writeFieldBegin("credentials", ::apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, this->credentials.size());
    std::map<std::string, std::string> ::const_iterator _iter38;
    for (_iter38 = this->credentials.begin(); _iter38 != this->credentials.end(); ++_iter38)
    {
      xfer += oprot->writeString(_iter38->first);
      xfer += oprot->writeString(_iter38->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* ColumnDef::ascii_fingerprint = "A5AC27AF2178A2927C057F23978619E4";
const uint8_t ColumnDef::binary_fingerprint[16] = {0xA5,0xAC,0x27,0xAF,0x21,0x78,0xA2,0x92,0x7C,0x05,0x7F,0x23,0x97,0x86,0x19,0xE4};

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_A5AC27AF2178A2927C057F23978619E4[] = {
  { 1, false },
  { 2, false },
  { 3, true },
  { 4, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_A5AC27AF2178A2927C057F23978619E4[] = {
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_DA45EC4BE6574774008DF9BE683A4778,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:string;3:opt-enum;4:opt-string;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_A5AC27AF2178A2927C057F23978619E4(
  ::apache::thrift::protocol::T_STRUCT,
  ColumnDef::binary_fingerprint,
  trlo_metas_cassandra_A5AC27AF2178A2927C057F23978619E4,
  trlo_specs_cassandra_A5AC27AF2178A2927C057F23978619E4);

::apache::thrift::reflection::local::TypeSpec* ColumnDef::local_reflection = 
  &trlo_typespec_cassandra_A5AC27AF2178A2927C057F23978619E4;

uint32_t ColumnDef::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_validation_class = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->validation_class);
          isset_validation_class = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast39;
          xfer += iprot->readI32(ecast39);
          this->index_type = (IndexType)ecast39;
          this->__isset.index_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->index_name);
          this->__isset.index_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_validation_class)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ColumnDef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ColumnDef");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("validation_class", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->validation_class);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.index_type) {
    xfer += oprot->writeFieldBegin("index_type", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->index_type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.index_name) {
    xfer += oprot->writeFieldBegin("index_name", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->index_name);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* CfDef::ascii_fingerprint = "272E8EC3FD84A810C93D0A7A08470759";
const uint8_t CfDef::binary_fingerprint[16] = {0x27,0x2E,0x8E,0xC3,0xFD,0x84,0xA8,0x10,0xC9,0x3D,0x0A,0x7A,0x08,0x47,0x07,0x59};

// double
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_E8CD7DA078A86726031AD64F35F5A6C0(
  ::apache::thrift::protocol::T_DOUBLE);

// list<{1:string;2:string;3:opt-enum;4:opt-string;}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_F1B1AE393A6FED8FC52C319F72A0646C(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_cassandra_A5AC27AF2178A2927C057F23978619E4,
  NULL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_272E8EC3FD84A810C93D0A7A08470759[] = {
  { 1, false },
  { 2, false },
  { 3, true },
  { 4, true },
  { 5, true },
  { 6, true },
  { 7, true },
  { 8, true },
  { 9, true },
  { 10, true },
  { 11, true },
  { 12, true },
  { 13, true },
  { 14, true },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_272E8EC3FD84A810C93D0A7A08470759[] = {
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_cassandra_C506FF134BABDD6E68AB3E6350E95305,
  &trlo_typespec_cassandra_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_cassandra_E8CD7DA078A86726031AD64F35F5A6C0,
  &trlo_typespec_cassandra_F1B1AE393A6FED8FC52C319F72A0646C,
  &trlo_typespec_cassandra_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:string;3:opt-string;4:opt-string;5:opt-string;6:opt-string;7:opt-string;8:opt-string;9:opt-double;10:opt-bool;11:opt-double;12:opt-double;13:opt-list<{1:string;2:string;3:opt-enum;4:opt-string;}>;14:opt-i32;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_272E8EC3FD84A810C93D0A7A08470759(
  ::apache::thrift::protocol::T_STRUCT,
  CfDef::binary_fingerprint,
  trlo_metas_cassandra_272E8EC3FD84A810C93D0A7A08470759,
  trlo_specs_cassandra_272E8EC3FD84A810C93D0A7A08470759);

::apache::thrift::reflection::local::TypeSpec* CfDef::local_reflection = 
  &trlo_typespec_cassandra_272E8EC3FD84A810C93D0A7A08470759;

uint32_t CfDef::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_keyspace = false;
  bool isset_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keyspace);
          isset_keyspace = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->column_type);
          this->__isset.column_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clock_type);
          this->__isset.clock_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comparator_type);
          this->__isset.comparator_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->subcomparator_type);
          this->__isset.subcomparator_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->reconciler);
          this->__isset.reconciler = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->row_cache_size);
          this->__isset.row_cache_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->preload_row_cache);
          this->__isset.preload_row_cache = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->key_cache_size);
          this->__isset.key_cache_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->read_repair_chance);
          this->__isset.read_repair_chance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->column_metadata.clear();
            uint32_t _size40;
            ::apache::thrift::protocol::TType _etype43;
            iprot->readListBegin(_etype43, _size40);
            this->column_metadata.resize(_size40);
            uint32_t _i44;
            for (_i44 = 0; _i44 < _size40; ++_i44)
            {
              xfer += this->column_metadata[_i44].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.column_metadata = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->gc_grace_seconds);
          this->__isset.gc_grace_seconds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_keyspace)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t CfDef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CfDef");
  xfer += oprot->writeFieldBegin("keyspace", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->keyspace);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.column_type) {
    xfer += oprot->writeFieldBegin("column_type", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->column_type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.clock_type) {
    xfer += oprot->writeFieldBegin("clock_type", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->clock_type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.comparator_type) {
    xfer += oprot->writeFieldBegin("comparator_type", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->comparator_type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.subcomparator_type) {
    xfer += oprot->writeFieldBegin("subcomparator_type", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->subcomparator_type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.reconciler) {
    xfer += oprot->writeFieldBegin("reconciler", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->reconciler);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.comment) {
    xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->comment);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.row_cache_size) {
    xfer += oprot->writeFieldBegin("row_cache_size", ::apache::thrift::protocol::T_DOUBLE, 9);
    xfer += oprot->writeDouble(this->row_cache_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.preload_row_cache) {
    xfer += oprot->writeFieldBegin("preload_row_cache", ::apache::thrift::protocol::T_BOOL, 10);
    xfer += oprot->writeBool(this->preload_row_cache);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.key_cache_size) {
    xfer += oprot->writeFieldBegin("key_cache_size", ::apache::thrift::protocol::T_DOUBLE, 11);
    xfer += oprot->writeDouble(this->key_cache_size);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.read_repair_chance) {
    xfer += oprot->writeFieldBegin("read_repair_chance", ::apache::thrift::protocol::T_DOUBLE, 12);
    xfer += oprot->writeDouble(this->read_repair_chance);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.column_metadata) {
    xfer += oprot->writeFieldBegin("column_metadata", ::apache::thrift::protocol::T_LIST, 13);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->column_metadata.size());
      std::vector<ColumnDef> ::const_iterator _iter45;
      for (_iter45 = this->column_metadata.begin(); _iter45 != this->column_metadata.end(); ++_iter45)
      {
        xfer += (*_iter45).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.gc_grace_seconds) {
    xfer += oprot->writeFieldBegin("gc_grace_seconds", ::apache::thrift::protocol::T_I32, 14);
    xfer += oprot->writeI32(this->gc_grace_seconds);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* KsDef::ascii_fingerprint = "11CF6A44E7A06AFA50BB8BD483E987DB";
const uint8_t KsDef::binary_fingerprint[16] = {0x11,0xCF,0x6A,0x44,0xE7,0xA0,0x6A,0xFA,0x50,0xBB,0x8B,0xD4,0x83,0xE9,0x87,0xDB};

// list<{1:string;2:string;3:opt-string;4:opt-string;5:opt-string;6:opt-string;7:opt-string;8:opt-string;9:opt-double;10:opt-bool;11:opt-double;12:opt-double;13:opt-list<{1:string;2:string;3:opt-enum;4:opt-string;}>;14:opt-i32;}>
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_6C8B0B812D6142F9C0FF505793836FEC(
  ::apache::thrift::protocol::T_LIST,
  &trlo_typespec_cassandra_272E8EC3FD84A810C93D0A7A08470759,
  NULL);

::apache::thrift::reflection::local::FieldMeta
trlo_metas_cassandra_11CF6A44E7A06AFA50BB8BD483E987DB[] = {
  { 1, false },
  { 2, false },
  { 3, true },
  { 4, false },
  { 5, false },
  { 0, false }
};
::apache::thrift::reflection::local::TypeSpec*
trlo_specs_cassandra_11CF6A44E7A06AFA50BB8BD483E987DB[] = {
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_B45CFFE084DD3D20D928BEE85E7B0F21,
  &trlo_typespec_cassandra_E525259F38EF383401EB0A958458F19C,
  &trlo_typespec_cassandra_F89EDB52B075B8BD95989BD3D0A04C0A,
  &trlo_typespec_cassandra_6C8B0B812D6142F9C0FF505793836FEC,
  &trlo_typespec_cassandra_CAB8111FD0B710A336C898E539090E34,
};
// {1:string;2:string;3:opt-map<string,string>;4:i32;5:list<{1:string;2:string;3:opt-string;4:opt-string;5:opt-string;6:opt-string;7:opt-string;8:opt-string;9:opt-double;10:opt-bool;11:opt-double;12:opt-double;13:opt-list<{1:string;2:string;3:opt-enum;4:opt-string;}>;14:opt-i32;}>;}
::apache::thrift::reflection::local::TypeSpec
trlo_typespec_cassandra_11CF6A44E7A06AFA50BB8BD483E987DB(
  ::apache::thrift::protocol::T_STRUCT,
  KsDef::binary_fingerprint,
  trlo_metas_cassandra_11CF6A44E7A06AFA50BB8BD483E987DB,
  trlo_specs_cassandra_11CF6A44E7A06AFA50BB8BD483E987DB);

::apache::thrift::reflection::local::TypeSpec* KsDef::local_reflection = 
  &trlo_typespec_cassandra_11CF6A44E7A06AFA50BB8BD483E987DB;

uint32_t KsDef::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_strategy_class = false;
  bool isset_replication_factor = false;
  bool isset_cf_defs = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->strategy_class);
          isset_strategy_class = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->strategy_options.clear();
            uint32_t _size46;
            ::apache::thrift::protocol::TType _ktype47;
            ::apache::thrift::protocol::TType _vtype48;
            iprot->readMapBegin(_ktype47, _vtype48, _size46);
            uint32_t _i50;
            for (_i50 = 0; _i50 < _size46; ++_i50)
            {
              std::string _key51;
              xfer += iprot->readString(_key51);
              std::string& _val52 = this->strategy_options[_key51];
              xfer += iprot->readString(_val52);
            }
            iprot->readMapEnd();
          }
          this->__isset.strategy_options = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->replication_factor);
          isset_replication_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->cf_defs.clear();
            uint32_t _size53;
            ::apache::thrift::protocol::TType _etype56;
            iprot->readListBegin(_etype56, _size53);
            this->cf_defs.resize(_size53);
            uint32_t _i57;
            for (_i57 = 0; _i57 < _size53; ++_i57)
            {
              xfer += this->cf_defs[_i57].read(iprot);
            }
            iprot->readListEnd();
          }
          isset_cf_defs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_strategy_class)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_replication_factor)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cf_defs)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t KsDef::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("KsDef");
  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("strategy_class", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->strategy_class);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.strategy_options) {
    xfer += oprot->writeFieldBegin("strategy_options", ::apache::thrift::protocol::T_MAP, 3);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, this->strategy_options.size());
      std::map<std::string, std::string> ::const_iterator _iter58;
      for (_iter58 = this->strategy_options.begin(); _iter58 != this->strategy_options.end(); ++_iter58)
      {
        xfer += oprot->writeString(_iter58->first);
        xfer += oprot->writeString(_iter58->second);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("replication_factor", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->replication_factor);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("cf_defs", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, this->cf_defs.size());
    std::vector<CfDef> ::const_iterator _iter59;
    for (_iter59 = this->cf_defs.begin(); _iter59 != this->cf_defs.end(); ++_iter59)
    {
      xfer += (*_iter59).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}}} // namespace
